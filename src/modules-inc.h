// This file is generated from modules .inc files 

#ifndef MODULE_EXT
#define MODULE_EXT

char* modulesExtension =
	"class PriorityQueue {\n"
	"    PriorityQueue(keyExtractor) {\n"
	"        this.arr = [];\n"
	"        this.keyExtractor = keyExtractor;  \n"
	"    }\n"
	"\n"
	"    __swap(i, j) {\n"
	"        var tmp = this.arr[i];\n"
	"        this.arr[i] = this.arr[j];\n"
	"        this.arr[j] = tmp;\n"
	"    }\n"
	"\n"
	"    __bubbleUp(idx) {\n"
	"        if (idx == 0) {\n"
	"            return;\n"
	"        }\n"
	"\n"
	"        var parentIdx = Number.toInteger((idx - 1) / 2);\n"
	"    \n"
	"        if (this.keyExtractor(this.arr[idx]) < this.keyExtractor(this.arr[parentIdx])) {\n"
	"            this.__swap(idx, parentIdx);\n"
	"            this.__bubbleUp(parentIdx);\n"
	"        }\n"
	"    }\n"
	"\n"
	"    enqueue(item) {\n"
	"        this.__bubbleUp(this.arr.push(item) - 1);\n"
	"    }\n"
	"\n"
	"    __heapify(idx) {\n"
	"        var leftIdx = 2 * idx + 1;\n"
	"        var rightIdx = 2 * idx + 2;\n"
	"        var lowestValueIdx = idx;\n"
	"\n"
	"        if (leftIdx < this.size() and this.keyExtractor(this.arr[leftIdx]) < this.keyExtractor(this.arr[lowestValueIdx])) {\n"
	"            lowestValueIdx = leftIdx;\n"
	"        }\n"
	"\n"
	"        if (rightIdx < this.size() and this.keyExtractor(this.arr[rightIdx]) < this.keyExtractor(this.arr[lowestValueIdx])) {\n"
	"            lowestValueIdx = rightIdx;\n"
	"        }\n"
	"\n"
	"        if (lowestValueIdx != idx) {\n"
	"            this.__swap(lowestValueIdx, idx);\n"
	"            this.__heapify(lowestValueIdx);\n"
	"        }\n"
	"    }\n"
	"\n"
	"    dequeue() {\n"
	"        if (this.size() == 0) {\n"
	"            return nil;\n"
	"        }\n"
	"\n"
	"        var item = this.arr[0];\n"
	"        this.arr[0] = this.arr[this.size() - 1]; \n"
	"        this.arr.pop();\n"
	"        this.__heapify(0);\n"
	"\n"
	"        return item;\n"
	"    }\n"
	"\n"
	"    peek() {\n"
	"        if (this.size() == 0) {\n"
	"            return nil;\n"
	"        }\n"
	"\n"
	"        return this.arr[0];\n"
	"    }\n"
	"\n"
	"    size() {\n"
	"        return this.arr.length();\n"
	"    }\n"
	"}\n";

#endif
