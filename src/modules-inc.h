// This file is generated from modules .inc files 

#ifndef MODULE_EXT
#define MODULE_EXT

char* modulesExtension =
	"class PriorityQueue {\n"
	"    PriorityQueue(keyExtractor) {\n"
	"        this.arr = [];\n"
	"        this.keyExtractor = keyExtractor;  \n"
	"    }\n"
	"\n"
	"    __swap(i, j) {\n"
	"        var tmp = this.arr[i];\n"
	"        this.arr[i] = this.arr[j];\n"
	"        this.arr[j] = tmp;\n"
	"    }\n"
	"\n"
	"    __bubbleUp(idx) {\n"
	"        if (idx == 0) {\n"
	"            return;\n"
	"        }\n"
	"\n"
	"        var parentIdx = Number.toInteger((idx - 1) / 2);\n"
	"    \n"
	"        if (this.keyExtractor(this.arr[idx]) < this.keyExtractor(this.arr[parentIdx])) {\n"
	"            this.__swap(idx, parentIdx);\n"
	"            this.__bubbleUp(parentIdx);\n"
	"        }\n"
	"    }\n"
	"\n"
	"    enqueue(item) {\n"
	"        this.__bubbleUp(this.arr.push(item) - 1);\n"
	"    }\n"
	"\n"
	"    __heapify(idx) {\n"
	"        var leftIdx = 2 * idx + 1;\n"
	"        var rightIdx = 2 * idx + 2;\n"
	"        var lowestValueIdx = idx;\n"
	"\n"
	"        if (leftIdx < this.size() and this.keyExtractor(this.arr[leftIdx]) < this.keyExtractor(this.arr[lowestValueIdx])) {\n"
	"            lowestValueIdx = leftIdx;\n"
	"        }\n"
	"\n"
	"        if (rightIdx < this.size() and this.keyExtractor(this.arr[rightIdx]) < this.keyExtractor(this.arr[lowestValueIdx])) {\n"
	"            lowestValueIdx = rightIdx;\n"
	"        }\n"
	"\n"
	"        if (lowestValueIdx != idx) {\n"
	"            this.__swap(lowestValueIdx, idx);\n"
	"            this.__heapify(lowestValueIdx);\n"
	"        }\n"
	"    }\n"
	"\n"
	"    dequeue() {\n"
	"        if (this.size() == 0) {\n"
	"            return nil;\n"
	"        }\n"
	"\n"
	"        var item = this.arr[0];\n"
	"        this.arr[0] = this.arr[this.size() - 1]; \n"
	"        this.arr.pop();\n"
	"        this.__heapify(0);\n"
	"\n"
	"        return item;\n"
	"    }\n"
	"\n"
	"    peek() {\n"
	"        if (this.size() == 0) {\n"
	"            return nil;\n"
	"        }\n"
	"\n"
	"        return this.arr[0];\n"
	"    }\n"
	"\n"
	"    size() {\n"
	"        return this.arr.length();\n"
	"    }\n"
	"}\n"
	"\n"
	"class BinaryTree {\n"
	"    BinaryTree() {\n"
	"        this.root = nil;\n"
	"        this.size = 0;\n"
	"    }\n"
	"\n"
	"    __compare(a, b) {\n"
	"        if (Number.isNumber(a) and Number.isNumber(b)) {\n"
	"            return a - b;\n"
	"        } else if (String.isString(a) and String.isString(b)) {\n"
	"            return a.hash() - b.hash();\n"
	"        }\n"
	"\n"
	"        throw Error(\"Invalid data type.\");\n"
	"    }\n"
	"\n"
	"    __height(node) {\n"
	"        if (node == nil) {\n"
	"            return 0;\n"
	"        }\n"
	"\n"
	"        return node.height;\n"
	"    }\n"
	"\n"
	"    __balance(node) {\n"
	"        if (node == nil) {\n"
	"            return 0;\n"
	"        }\n"
	"\n"
	"        return this.__height(node.right) - this.__height(node.left);\n"
	"    }\n"
	"\n"
	"    __rotateRight(node) {\n"
	"        var tmp = node.left;\n"
	"        var tmp2 = node.left.right;\n"
	"        node.left.right = node;\n"
	"        node.left = tmp2;\n"
	"\n"
	"        node.height = Math.max(this.__height(node.left), this.__height(node.right)) + 1;\n"
	"        tmp.height = Math.max(this.__height(tmp.left), this.__height(tmp.right)) + 1;\n"
	"    \n"
	"        return tmp;\n"
	"    }\n"
	"\n"
	"    __rotateLeft(node) {\n"
	"        var tmp = node.right;\n"
	"        var tmp2 = node.right.left;\n"
	"        node.right.left = node;\n"
	"        node.right = tmp2;\n"
	"\n"
	"        node.height = Math.max(this.__height(node.left), this.__height(node.right)) + 1;\n"
	"        tmp.height = Math.max(this.__height(tmp.left), this.__height(tmp.right)) + 1;\n"
	"\n"
	"        return tmp;\n"
	"    }\n"
	"\n"
	"    __insert(root, key, value) {\n"
	"        if (root == nil) {\n"
	"            return { key, value, height: 1, left: nil, right: nil };\n"
	"        }\n"
	"\n"
	"        var comparison = this.__compare(root.key, key);\n"
	"\n"
	"        if (comparison > 0) {\n"
	"            root.left = this.__insert(root.left, key, value); \n"
	"        } else if (comparison < 0) {\n"
	"            root.right = this.__insert(root.right, key, value);\n"
	"        }\n"
	"\n"
	"        root.height = Math.max(this.__height(root.left), this.__height(root.right)) + 1;\n"
	"        var rootBalance = this.__balance(root);\n"
	"\n"
	"        if (rootBalance < -1 and this.__balance(root.left) <= 0) {\n"
	"            // left-left case\n"
	"        \n"
	"            return this.__rotateRight(root);\n"
	"        }\n"
	"        if (rootBalance < -1 and this.__balance(root.left) >= 0) {\n"
	"            // left-right case\n"
	"            \n"
	"            root.left = this.__rotateLeft(root.left);\n"
	"            return this.__rotateRight(root);\n"
	"        }\n"
	"        if (rootBalance > 1 and this.__balance(root.right) >= 0) {\n"
	"            // right-right case\n"
	"\n"
	"            return this.__rotateLeft(root);\n"
	"        }\n"
	"        if (rootBalance > 1 and this.__balance(root.right) <= 0) {\n"
	"            // right-left case\n"
	"            \n"
	"            root.right = this.__rotateRight(root.right);\n"
	"            return this.__rotateLeft(root);\n"
	"        }\n"
	"\n"
	"        return root;\n"
	"    }\n"
	"\n"
	"    insert(key, value) {\n"
	"        this.root = this.__insert(this.root, key, value);\n"
	"        this.size += 1;\n"
	"    }\n"
	"\n"
	"    __find(root, key) {\n"
	"        if (root == nil) {\n"
	"            return nil;\n"
	"        }\n"
	"\n"
	"        var cmp = this.__compare(root.key, key);\n"
	"\n"
	"        if (cmp < 0) {\n"
	"            return this.__find(root.right, key);\n"
	"        } else if (cmp > 0) {\n"
	"            return this.__find(root.left, key);\n"
	"        }\n"
	"\n"
	"        return root;\n"
	"    }\n"
	"\n"
	"    find(key) {\n"
	"        var node = this.__find(this.root, key);\n"
	"\n"
	"        if (node == nil) {\n"
	"            return nil;\n"
	"        }\n"
	"        \n"
	"        return node.value;\n"
	"    }\n"
	"}\n"
	"\n";

#endif
